syntax = "proto3";

package bcdb;

// Interface exported by the server.
service BCDB {
  // Set stores a document and return a header
  rpc Set(SetRequest) returns (SetResponse) {}

  // Get a document from header
  rpc Get(GetRequest) returns (GetResponse) {}

  // Fetch is similar to Get but does not require a collection
  rpc Fetch(FetchRequest) returns (GetResponse) {}

  // Modify updates a document meta
  rpc Update(UpdateRequest) returns (UpdateResponse) {}

  // List returns a list of document IDs that matches a query
  rpc List(QueryRequest) returns (stream ListResponse) {}

  // Find like list but return full documents
  rpc Find(QueryRequest) returns (stream FindResponse) {}

  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
}

// Tag is a single entry in an object.
// The tag key must be a string, but the
// value can be either a string, double signed, or unsigned number
// Tags are always indexed, and can be used to find the associated meta
// objects later on.
message Tag {
  // key of the tag
  string key = 1;
  // value of the tag. Only supporting few primitive types
  string value = 2;
}

message AclRef { uint64 acl = 1; }

// Metadata represents a set of tags (also known as Metadata)
message Metadata {
  // set of searchable tags.
  map<string, string> tags = 1;
  // required collection
  string collection = 2;
  // acl is a ref to the acl key (optional)
  AclRef acl = 3;
}

// Set request
message SetRequest {
  Metadata metadata = 1;
  bytes data = 2;
}

// Set response
message SetResponse { uint32 id = 1; }

// Get request
message FetchRequest { uint32 id = 1; }

// Get request
message GetRequest {
  uint32 id = 1;
  string collection = 2;
}

// Get response
message GetResponse {
  Metadata metadata = 1;
  bytes data = 2;
}

// Update request
message UpdateRequest {
  message UpdateData { bytes data = 1; }

  uint32 id = 1;
  Metadata metadata = 2;
  UpdateData data = 3;
}

// Update response
message UpdateResponse {}

// Query request for finding entries
message QueryRequest {
  string collection = 1;
  repeated Tag tags = 2;
}

// List response
message ListResponse { uint32 id = 1; }

// Find response
message FindResponse {
  uint32 id = 1;
  Metadata metadata = 2;
}

message DeleteRequest {
  uint32 id = 1;
  string collection = 2;
}

message DeleteResponse {}

service Acl {
  rpc Get(ACLGetRequest) returns (ACLGetResponse) {}

  rpc Create(ACLCreateRequest) returns (ACLCreateResponse) {}

  rpc List(ACLListRequest) returns (stream ACLListResponse) {}

  rpc Set(ACLSetRequest) returns (ACLSetResponse) {}

  rpc Grant(ACLUsersRequest) returns (ACLUsersResponse) {}

  rpc Revoke(ACLUsersRequest) returns (ACLUsersResponse) {}
}

message ACL {
  string perm = 1;
  repeated uint64 users = 2;
}

message ACLGetRequest { uint32 key = 1; }

message ACLGetResponse { ACL acl = 1; }

message ACLCreateRequest { ACL acl = 1; }

message ACLCreateResponse { uint32 key = 1; }

message ACLListRequest {}

message ACLListResponse {
  uint32 key = 1;
  ACL acl = 2;
}

message ACLSetRequest {
  uint32 key = 1;
  string perm = 2;
}

message ACLSetResponse {}

message ACLUsersRequest {
  uint32 key = 1;
  repeated uint64 users = 2;
}

message ACLUsersResponse { uint64 updated = 1; }

service Identity {
  rpc Info(InfoRequest) returns (InfoResponse) {}
  rpc Sign(SignRequest) returns (SignResponse) {}
}

message IdentityInfo {
  // id is 3bot id for this server
  uint32 id = 1;
  // key is the public key of this server
  string key = 2;
}

message InfoRequest {}

message InfoResponse { IdentityInfo identity = 1; }

message SignRequest { bytes message = 1; }

message SignResponse {
  IdentityInfo identity = 1;
  bytes signature = 2;
}
